1. $ echo "Hello World" gives 'Hello World' on the terminal. This command announces the phrase "Hello World" on the terminal. I was expecting the command to say "Hello World" on the terminal when I finished typing it. This command works by first typing '$' which shows that the normal user is in the command environment. Then 'echo' tells the terminal to broadcast a given phrase within the double speech marks "", which is the phrase "Hello World". Hence "Hello World" is displayed in the terminal.

2. $ echo Hello, World gives 'Hello, World' on the terminal. This command announces Hello, World on the terminal. I was expecting for the command to not work based on the previous knowledge of coding that words or phrases wouldn't be displayed unless you put said word or phrase within double speech marks "". Like before 'echo' commands the terminal to broadcast a given phrase, but this time, it doesn't need "".

3. $ echo Hello, world; Foo bar gives 'Hello, world'
No command 'Foo' found, did you mean:
 Command 'zoo' from package 'zoo' (universe)
 Command 'Fgo' from package 'ferret-vis' (universe)
 Command 'woo' from package 'python-woo' (universe)
 Command 'goo' from package 'goo' (universe)
Foo: command not found. This command works like step 2, but Foo bar tells the terminal to direct the output of the second command 'Foo bar' within the input of the first command '$ echo Hello, world'. Since the command 'Foo' has not been found, the bar command does not execute and the terminal displays an error message. I was expecting the command to not execute anything more than 'Hello, world'.

4. $ echo Hello, world! gives 'Hello, world!'
Like before, the command annouces 'Hello, world!' on the terminal, but this time with a '!'. I expected the command to display the message 'Hello, world!' Echo tells the terminal to broadcast the message 'Hello, world!' and the terminal displays it.

5. $ echo "line one";echo "line two" gives
'line one
line two'
The command annouces "line one" and "line two" on 2 seperate lines on the terminal.
I expected the command to display the text on 2 seperate lines of the terminal.
The command works like two seperate echo commands. The semicolon ';' between the 2 echo commands allows for the phrases to be displayed on 2 seperate lines of the terminal.

6. $ echo "Hello, world > readme" gives 'Hello, world > readme' on the terminal. The command displays 'Hello, world > readme' on the terminal. I expected it to display the given message. The command works by annoucing the phrase inside the double speech marks "" on the terminal.

7. $ echo "Hello, world" > readme displays nothing. Nothing happens when this command is executed on the terminal since the greater than symbol can only be applied to numerical variables or assigned numerical variables (e.g. x = 3, y = 4 etc.). I expected the command to just display the phrase 'Hello, world'. 

8. $ cat readme gives 'Hello, world' on the terminal. This command displays 'Hello, world' on the terminal. I expected the command to display nothing since I thought nothing was stored on the command for the terminal to display. The 'readme' part of the command stores a certain phrase or word and 'cat' works like 'echo', but is more specific for a stored word or phrase. Together, they display the phrase on the terminal.

9. $ example="Hello, World" displays nothing. Nothing happens when this command is executed on the terminal. This is because this is a assigned variable, which will not be displayed on the terminal unless the variable 'example' is used in another command or used to make a sentence out of other assigned variables by following this example:  "variable1" + "variable2". All that $ example="Hello, World" does is stores the string "Hello, World" within the assigned variable 'example'. I expected nothing to displayed since this was a setting command.

10. $ echo $example displays 'Hello, World' since this command is telling the terminal to display non-numerical value set within the variable in the previous step, which was 'example'. I expected this message to be displayed since echo tells the terminal to display anything that it is tasked in doing.

11. $ echo '$example' is not the same as $ echo $example as the command $ echo '$example' is telling the terminal to only display the string within the speech marks, which is '$example'. I expected the string '$example' to come out instead of 'Hello, World' like in the previous step.

12. $ echo "$example" is the same as $ echo $example as both commands tell the terminal to display the non-numerical value set within the assigned variable given in step 9. I expected this to display '$example' instead like in step 11 instead of 'Hello, World'.

13. $ echo "Please enter your name."; read example gives:
Please enter your name.
<Name>
This command allows for the user to give an input in order for the process of the command to be thoroughly completed. I expected the command to display 'Please enter your name.' and the line to type your name in. The unassigned variable 'read example' allows the user to type any text in the line after the string 'Please enter your name.', which helps to complete the command and this part of the command stores the text you store acting as another assigned variable.

14. $ echo "Hello $example" displays 'Hello <Name>'. The command displays the text typed and stored in the 'read example' variable in the previous step. This is put with the string 'Hello' and forms 'Hello <Name>'. I expected the command to display the 'Hello' and whatever the user typed next in the previous step.

15. $ three=1+1+1;echo $three gives '1+1+1'. The command displays the assigned variable 'three=1+1+1' whenever 'echo $three' is typed in the terminal. I expected the command to display the assigned variable when 'echo' was typed in.

16. $ bc gives bc 1.06.95
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'. 
(interrupt) use quit to exit.
This command gives the copyright details of the software used, which is Terminal, and the option to read further into the details of the warranty of the software by allowing the user to type 'warranty'. The user has to type 'quit' to exit out of the copyright details.

17.$ echo 1+1+1 | bc gives the numerical value '3' on the terminal. This command, when typed, takes the input of 1+1+1 and assigns that command to the second command bc due to the presence of the vertical pipe '|'. I Expected only 'echo 1+1+1' to be displayed and not 'bc'.

18.$ let three=1+1+1;echo $three displays the numerical value of '3' on the terminal. 'let three=1+1+1' not only assigns the variable 'three' to be '1+1+1', but 'let' allows this variable to be added to get to the numerical value of '3'. When 'echo $three' is typed, rather than displaying '1+1+1' like the command '$ three=1+1+1;echo $three' does, this command displays the added values of '1+1+1', which is '3'. I thought that this command would display '1+1+1' like before.

19. $ echo date displays 'date' in the terminal. The command 'echo' tells the terminal to broadcast the numerical or non-numerical value that follows after. I expected for the terminal to display the text 'date' since the same command worked when 'Hello, World' was typed in.

20. $ cal displays the calender on the terminal to the correct day, month and year, which in this case is the 13th October 2019.
    October 2019      
 Su  Mo Tu We Th Fr Sa  
        1  2  3  4  5  
  6   7  8  9 10 11 12  
<13> 14 15 16 17 18 19  
 20  21 22 23 24 25 26  
 27  28 29 30 31 
 The command tells the terminal to open up a package which contains the calender. I expected for the command to open up the calender.

21. $ which cal displays the file directory of the calender package within the Linux hard drive: '/usr/bin/cal'. This works by asking the terminal to search all directories on the hard drive to find a package named 'calender'. Then afterwards, the terminal displays the file route it took to get to said package. I expected '$ which cal' to display the type of calender used such as lunar, solar etc.

22. $ /bin/cal displays 'bash: /bin/cal: No such file or directory' on the terminal. This happens since the terminal cannot find the starting file named 'bin' on the hard drive. I didn't expect the command to do nothing at first.

23. $ $(which cal) displays the calender on the terminal to the correct day, month and year like $ cal.
 Su  Mo Tu We Th Fr Sa  
        1  2  3  4  5  
  6   7  8  9 10 11 12  
<13> 14 15 16 17 18 19  
 20  21 22 23 24 25 26  
 27  28 29 30 31 
 The command tells the terminal to open up a package which contains the calender. I expected for the command to list the directory which contained the calender.

24.$ 'which cal' displayed which cal: command not found. The command tries to find the command named 'which cal'. Since there has not been a assigned command name 'which cal', the message displayed comes as 'command not found'. I expected the command to not do anything.

25. $ echo "The date is $(date)" gives 'The date is Sun 13 Oct 12:03:44 BST 2019'. The command tells the terminal to display the date, time and year in accordance with the BST. I expected the command to display the date, time and year accurately.

26. $ seq 0 9 displays
0
1
2
3
4
5
6
7
8
9
This command tells the terminal to list a sequence of numbers starting from and including 0 to finishing and including 9, with each line containing a number. I expected the command to list the sequence of numbers from 0 to 9 within one line.

27. $ seq 0 9 | wc - 1 displays
     10      10      20 -
wc: 1: No such file or directory
     10      10      20 total
The command 'wc' stands for word count and 'wc - 1' gives the line count of the line previously registered on the command terminal. The vertical pipe '|' is there to take the input of seq 0 9 and assigns the first command to the second command of wc -1.

28. $ seq 0 9 > sequence displays nothing. When the command is executed, the terminal does not display anything. This is most likely due to the fact that the greater than sign compares 2 numerical values and not comparing a sequence of numbers to the word sequence. I expected the command to not display anything.

29. $ wc - 1 < sequence gives 
10 10 20 -
wc: 1: No such file or directory
10 10 20 total
The command is meant to show that the word count of the previous line is less than the sequence of the numbers. I thought the command would not do anything because once again, the comparing sign was used in a command which would not be allowed for (e.g. comparing a number to a word).

30. $ for I in $(seq 1 9) ; do echo $I ; done gives
1
2
3
4
5
6
7
8
9
This command gives a similar output as $ seq 0 9, but a loop was used in the command for a certain range in the form of i + 1 until i = 8. Also 0 was excluded from the sequence of numbers. The command tells the terminal to repeat the command until a certain target is reached i = 9, which then at that point terminates the command.

31. $ (echo -n 0 ; for I in $(seq 1 9) ; do echo -n + $I ; done ; echo) | bc gives '45'. This command works by multiplying each number in the sequence with the value obtained in -n + $I for each I. Adding all the totals would get you '45'.











