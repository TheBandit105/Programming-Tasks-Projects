This code takes the value of n and calculates the sum of the all the 'sum + i * j' from 0 to the value of n, increasing i and j by 1 each iteration. The difference between this code and the previous one shown in Complexity - Example 1 is that the actual calculation is carried out the func subroutine and then the answer is transferred back to the main subroutine. Like before, each calculation in the code takes a constant time which we will denote as c time. In the worst case scenario, n is so big that the code just doesn't run due to the amount of memory space the code needs to execute. In the best case, the value of n is close to 0 that the code can be easily executed within a few nanoseconds. We can conclude, like before, that increasing the value of n increases the time for the code to complete the execution.